package com.example.jroster

import android.content.Context
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import android.widget.Button
import android.widget.EditText
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.constraintlayout.widget.ConstraintSet
import com.google.android.material.bottomnavigation.BottomNavigationView
import kotlinx.coroutines.withContext
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext


class FragmentFriends : Fragment() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var addFriendButton: Button
    private lateinit var friendCodeInput: EditText
    private lateinit var viewRosterButton: Button
    private lateinit var friendAdapter: FriendAdapter
    private lateinit var optionBox: LinearLayout


    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_friends, container, false)

        // Initialize UI components
        recyclerView = view.findViewById(R.id.friendRecyclerView)
        addFriendButton = view.findViewById(R.id.addFriendButton)
        friendCodeInput = view.findViewById(R.id.friendCodeInput)
        optionBox = view.findViewById(R.id.optionBox)
        viewRosterButton = view.findViewById(R.id.viewRosterButton)

        // Set up RecyclerView
        recyclerView.layoutManager = LinearLayoutManager(requireContext())
        friendAdapter = FriendAdapter(
            listOf(),
            onFriendSelectedCallback = { onFriendSelected() },
            onDeleteFriendCallback = { friend -> deleteFriend(friend) }
        )

        recyclerView.adapter = friendAdapter

        // Set up Add Friend Button Listener
        addFriendButton.setOnClickListener {
            val friendCode = friendCodeInput.text.toString().trim()
            if (friendCode.length == 3) {
                checkInternetAndFetchFriend(friendCode)
            } else {
                showAlertDialog(
                    "Invalid Friend Code",
                    "Friend Codes are a 3 digit, case-sensitive code. They are generated by JTools and displayed when a user first enables 'JRoster'."
                )
            }
        }

        // Set up View Roster Button Listener
        viewRosterButton.setOnClickListener {
            viewRoster()
        }

        // Hide the optionBox initially
        optionBox.visibility = View.GONE

        // Update the table from the DB
        updateRecyclerView()

        return view
    }

    // Method to handle friend selection and show the option box
    private fun onFriendSelected() {
        optionBox.visibility = View.VISIBLE

        // Modify constraints
        val constraintLayout = view?.findViewById<ConstraintLayout>(R.id.settingsLayout)
        val constraintSet = ConstraintSet()
        constraintSet.clone(constraintLayout)

        // Connect
        constraintSet.connect(
            R.id.friendRecyclerView,
            ConstraintSet.BOTTOM,
            R.id.optionBox,
            ConstraintSet.TOP
        )

        // Apply
        constraintSet.applyTo(constraintLayout)
    }

    // Check internet connection and fetch friend data
    private fun checkInternetAndFetchFriend(friendCode: String) {
        if (isInternetAvailable(requireContext())) {
            fetchFriendDataFromMySQL(friendCode)
        } else {
            showAlertDialog(
                "No Internet Connection",
                "Sadly, it requires the combined power of the entire internet to discover if you do in fact, have any friends. Please try again once you have an internet connection."
            )
        }
    }

    // Fetch friend data from MySQL
    private fun fetchFriendDataFromMySQL(friendCode: String) {
        Log.d("FriendDataDebug", "Fetching friend data for code: $friendCode")

        // Make sure we now expect a list of Friend objects
        val call = RetrofitClient.friendApiService.getFriendData(friendCode)

        call.enqueue(object : Callback<List<Friend>> {
            override fun onResponse(call: Call<List<Friend>>, response: Response<List<Friend>>) {

                if (response.isSuccessful) {
                    val friendDataList = response.body()

                    if (friendDataList != null && friendDataList.isNotEmpty()) {
                        // Handle each friend in the list
                        for (friend in friendDataList) {
                            insertFriendIntoDatabase(friend)
                        }
                    } else {
                        Toast.makeText(requireContext(), "No friend data found for this code", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(requireContext(), "Failed to fetch friend data", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<List<Friend>>, t: Throwable) {
                Toast.makeText(requireContext(), "Error: ${t.message}", Toast.LENGTH_SHORT).show()
            }
        })
    }

    // Insert fetched friend data into Room database
    private fun insertFriendIntoDatabase(friend: Friend) {
        GlobalScope.launch(Dispatchers.IO) {
            val db = AppDatabase.getInstance(requireContext())
            db.friendDao().insertFriend(friend)
            launch(Dispatchers.Main) {
                // Update RecyclerView
                updateRecyclerView()

                // Clear the input field
                friendCodeInput.setText("")

                // Close the keyboard
                val imm = requireContext().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
                imm.hideSoftInputFromWindow(friendCodeInput.windowToken, 0)

                // Show a success message
                Toast.makeText(requireContext(), "Friend added successfully", Toast.LENGTH_SHORT).show()
            }
        }
    }

    // Delete a friend from Rooms
    private fun deleteFriend(friend: Friend) {
        AlertDialog.Builder(requireContext())
            .setTitle("Delete Friend")
            .setMessage("Are you sure you want to delete ${friend.name}?")
            .setPositiveButton("Yes") { dialog, _ ->
                // Delete friend from the database
                CoroutineScope(Dispatchers.IO).launch {
                    val db = AppDatabase.getInstance(requireContext())
                    db.friendDao().deleteFriend(friend.friendCode)

                    withContext(Dispatchers.Main) {
                        // Reload RecyclerView after deletion
                        updateRecyclerView()
                        Toast.makeText(requireContext(), "${friend.name} deleted", Toast.LENGTH_SHORT).show()
                    }
                }
                dialog.dismiss()
            }
            .setNegativeButton("No") { dialog, _ -> dialog.dismiss() }
            .create()
            .show()
    }

    // Update RecyclerView with data from Room database
    private fun updateRecyclerView() {
        GlobalScope.launch(Dispatchers.IO) {
            val db = AppDatabase.getInstance(requireContext())
            val friends = db.friendDao().getAllFriends()
            launch(Dispatchers.Main) {
                friendAdapter.updateData(friends)
            }
        }
    }

    // Check if internet is available
    private fun isInternetAvailable(context: Context): Boolean {
        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        val activeNetwork = connectivityManager.activeNetwork ?: return false
        val networkCapabilities = connectivityManager.getNetworkCapabilities(activeNetwork) ?: return false
        return networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)
    }

    // Show alert dialog for errors
    private fun showAlertDialog(title: String, message: String) {
        AlertDialog.Builder(requireContext())
            .setTitle(title)
            .setMessage(message)
            .setPositiveButton("OK", null)
            .show()
    }

    // Access the global vars
    private fun returnFriendsDetails(selectedFriend: Friend) {
        GlobalVariables.globalFriendUserID = selectedFriend.userID
        GlobalVariables.globalFriendCode = selectedFriend.friendCode
        GlobalVariables.globalFriendName = selectedFriend.name
        GlobalVariables.isFriendMode = true
    }

    fun saveSelectedFriendDetails(context: Context, friendID: String, friendCode: String, friendName: String) {
        // Update GlobalVariables
        GlobalVariables.globalFriendUserID = friendID
        GlobalVariables.globalFriendCode = friendCode
        GlobalVariables.globalFriendName = friendName
        GlobalVariables.isFriendMode = true
    }


    private fun viewRoster() {
        // Get the selected friend's details
        val selectedFriend = getSelectedFriendFromDatabase()

        if (selectedFriend != null) {
            // Save the selected friend's details in SharedPreferences
            saveSelectedFriendDetails(requireContext(), selectedFriend.userID, selectedFriend.friendCode, selectedFriend.name)

            // Switch to the Roster Fragment
            switchToRosterFragment()
        } else {
            Toast.makeText(requireContext(), "Please select a friend first.", Toast.LENGTH_SHORT).show()
        }
    }

    private fun getSelectedFriendFromDatabase(): Friend? {
        // Implement logic to get selected friend from database or adapter
        return friendAdapter.getSelectedFriend()
    }

    private fun switchToRosterFragment() {
        // Replace the current fragment with FragmentRoster
        val fragmentManager = parentFragmentManager
        val transaction = fragmentManager.beginTransaction()
        transaction.replace(R.id.fragment_container, FragmentRoster())
        transaction.addToBackStack(null)
        transaction.commit()

        // Make sure the roster tab highlights
        val bottomNavigationView = requireActivity().findViewById<BottomNavigationView>(R.id.bottomNavigationView)
        bottomNavigationView.selectedItemId = R.id.nav_roster
    }




}
